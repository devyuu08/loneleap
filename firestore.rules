rules_version = "2";
service cloud.firestore {
  match /databases/{database}/documents {

    function isAdmin() {
      return exists(/databases/$(database)/documents/admin/$(request.auth.token.email));
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    match /admin/{email} {
      allow read, write: if false;
    }

    match /itineraries/{itineraryId} {
      allow read, create: if isSignedIn();

      allow update: if isSignedIn() && (
        resource.data.createdBy.uid == request.auth.uid ||
        request.resource.data.diff(resource.data).affectedKeys()
          .hasOnly(["createdBy.displayName", "createdBy.photoURL"])
      );

      allow delete: if isSignedIn() && resource.data.createdBy.uid == request.auth.uid;
    }

    match /reviews/{reviewId} {
      allow read: if true;

      allow update: if isSignedIn() && (
        isOwner(resource.data.createdBy.uid) ||
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(["likesCount"]) ||
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(["createdBy.displayName", "createdBy.photoURL"])
      );

      allow delete: if isSignedIn() && isOwner(resource.data.createdBy.uid);
      allow create: if isSignedIn();

      match /comments/{commentId} {
        allow read: if true;
        allow create: if isSignedIn();
        allow delete: if isSignedIn() && isOwner(resource.data.author.uid);
      }

      match /likes/{userId} {
        allow read, write: if isSignedIn();
      }
    }

    match /users_public/{userId} {
      allow read: if true;
      allow update, create: if isSignedIn() && isOwner(userId);
    }

    match /users_private/{userId} {
      allow read: if isSignedIn() && (isOwner(userId) || isAdmin());

      allow update: if isSignedIn() && (
        isOwner(userId) || isAdmin() ||

        (
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['reportedCount']) &&
          request.resource.data.reportedCount == resource.data.reportedCount + 1
        ) ||

        (
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['itineraryCount']) &&
          (
            request.resource.data.itineraryCount == resource.data.itineraryCount + 1 ||
            request.resource.data.itineraryCount == resource.data.itineraryCount - 1
          )
        ) ||

        (
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['reviewCount']) &&
          (
            request.resource.data.reviewCount == resource.data.reviewCount + 1 ||
            request.resource.data.reviewCount == resource.data.reviewCount - 1
          )
        )
      );

      allow create: if isSignedIn();
    }

    match /chatRooms/{roomId} {
      allow read, create: if isSignedIn();

      allow update: if isSignedIn() && (
        request.auth.uid in resource.data.participants || 
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(["participants"]) ||
        (
          request.auth.uid == resource.data.createdBy.uid &&
          request.resource.data.diff(resource.data).affectedKeys()
            .hasOnly(["createdBy.displayName", "createdBy.photoURL"])
        )
      );

      allow delete: if isSignedIn() && request.auth.uid in resource.data.participants;
    }

    match /chatMessages/{messageId} {
      allow read: if isSignedIn();

      allow create: if isSignedIn() && (
        (
          (!("type" in request.resource.data) || request.resource.data.type == "text") &&
          request.resource.data.sender.uid == request.auth.uid
        )
        || (
          request.resource.data.type == "system" &&
          request.resource.data.systemType in ["join", "leave", "date"] &&
          request.resource.data.userId == request.auth.uid
        )
      );

      // 익명화 처리를 위한 update 허용
      allow update: if isSignedIn()
      && request.auth.uid == resource.data.sender.uid
      && (
       // sender 객체 전체가 덮어써질 때
       request.resource.data.diff(resource.data).affectedKeys().hasOnly(["sender"])
       // 또는 sender 내부 필드만 바뀔 때
       || request.resource.data.diff(resource.data).affectedKeys()
          .hasOnly(["sender.displayName", "sender.photoURL"])
      );
    }

    match /review_reports/{reportId} {
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.reporterId;

      // 생성한 사용자가 읽을 수 있도록 read 허용
      allow read: if isSignedIn() && resource.data.reporterId == request.auth.uid;

      allow delete: if isAdmin();

      match /{sub=**} {
        allow read, write: if isSignedIn(); // 필요시 조건 추가
        allow delete: if isAdmin();
      }
    }

    match /chatReports/{reportId} {
      allow create: if isSignedIn() && request.resource.data.reporterId == request.auth.uid;
      allow read, delete: if isAdmin();

      match /{sub=**} {
        allow read, write: if isSignedIn();
        allow read, delete: if isAdmin();
      }
    }

    match /recommended_places/{docId} {
      allow read: if true;
      allow write, create: if isSignedIn() && isAdmin();
    }

    // catch-all: 나머지 문서 차단
    match /{document=**} {
      allow read, write: if false;
    }
  }
}